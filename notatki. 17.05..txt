//app.tsx
import { Provider } from 'react-redux;

<Provider store={}>
<Switch>
<Route path="/movie/:id" component={Movie} />
</Switch>
</Provider>

new folder
store -> actions
store - > reducers
store -> selectors

//store/index.ts
import { createStore } from 'redux;

const store = createStore<StoreState, StoreActionTypes, any, any>(reducers, initialStoreState, composeWithDevTools());
export default store;

//store/store.ts
import {Actions as TodosActions} from './actions/todos.actions';

export type StoreActionTypes = '';

export interface StoreState {
todos: TodosList;
};

export const initialStoreState: StoreState ={
todos: todosListInitialState,
};

export const reducers = combineReducers<StoreState>({
todos: todosStoreReducer,
});


//reducers/todos.reducer.ts

export interface Todo {
id: number;
label: string;
done: boolean;
description: string;
}

export interface TodosList {
list: Todo[];
}

export const todosListInitialState: TodosList = {
list: [
{
id: -1;
description: '',
done: false,
label: '',
}
]
};

export const todosStoreReducer: Reducer<TodosList> = (state: TodosList, action) => {
switch(actions.type) {
default:
return state;
}
}

//actions/todos.actions.ts
export enum TodoStoreActions {
SET_NEW_TODO = 'SET_NEW_TODO',
SET_TODO_DONE = 'SET_TODO_DONE',
SET_DELETE_TODO = 'SET_DELETE_TODO'
}

export interface SetNewTodoAction{
type: TodoStoreActions.SET_NEW_TODO,
payload: {
todo: Todo
}
}

export interface SetTodoDoneAction{
type: TodoStoreActions.SET_TODO_DONE,
payload: {
id: number
}
}

export interface SetDeleteTodoAction{
type: TodoStoreActions.SET_DELETE_TODO,
payload: {
todo: Todo
}
}

export type Actions = SetNewTodoAction & SetTodoDoneAction & SetDeleteTodoAction;

export const todosActions = {
setNewTodo: (todo: Todo) =>({
type: TodoStoreActions.SET_NEW_TODO,
payload: {
todo
}
}),

setTodoDone (id: number): SetTodoDoneAction => ({
type: TodoStoreActions.SET_TODO_DONE,
payload: {id}
}),

setDeleteTodo: (todo: Todo): SetDeleteTodoAction => ({
type: TodoStoreActions.SET_DELETE_TODO,
payload{todo}
}),
};